=================
|| GENIPA BONE ||
=================

Backbone calculation.


=======================
|| GENIPA ESSENTIALS ||
=======================

Given a satisfiable formula F and a variable x, we say that x is
essential for the satisfiability of F if a truth value (True or False)
must be assigned to x in each satisfying assignment of F. This application
finds all the variables essential for the satisfiability of a given formula.

The algorithm tests each variable one by one on the dual-rail encoded
formula. Each test is done using two assumptions which represent the
constraint that the given variable must not be assigned.

The same application is implemented in Java (in the APPJAVA folder) to
demonstrate the usage of an IPASIR solver in a Java application.

Tomas Balyo
KIT, Karlsruhe
3.2.2015


==================
|| GENIPA FOLIO ||
==================

A trivial porfolio SAT solver based on the ipasir interface.
Starts a given number (second parameter, default 4) of threads 
each running the linked SAT solver on the same input (first parameter).
The clauses of the formula are shuffled for each thread in order
to diversify the portfolio.

Tomas Balyo
KIT, Karlsruhe
22.1.2015


================
|| GENIPA LSP ||
================

The application finds the longest (highest number of vertices)
simple path (a path without repeated vertices) in a graph.

Tomas Balyo
KIT, Karlsruhe
4.5.2017


==================
|| GENIPA REACH ||
==================

Reachability analysis for DIMSPEC files.


================
|| GENIPA SAT ||
================

Very simple stand-alone SAT solver which in essence is just a parser.

You might want to read the comments in 'makefile' carefully if you want
to adapt this applications to your own needs.


================
|| GENIPA MAX ||
================

Genipamax is a trivial partial Max-SAT solver 
based on adding activation literals to soft clauses 
and encoding a cardinality constraint on these activation literals.
To encode the cardinality constraint pblib[1] is used.

[1] http://tools.computational-logic.org/content/pblib.php

Tomas Balyo
KIT, Karlsruhe
22.1.2015
