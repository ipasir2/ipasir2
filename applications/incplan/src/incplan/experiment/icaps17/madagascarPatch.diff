--- a/main.c
+++ b/main.c
@@ -263,6 +263,7 @@ int main(int argc,char **argv) {

   currentInputFile = 0;
   outputfile = NULL;
+  solutionfile = NULL;

 #ifdef __LP64__
   flagMemoryLimit = 8.0*1024.0; /* By default, use max 8 GB of memory. */
@@ -271,6 +272,7 @@ int main(int argc,char **argv) {
 #endif

   flagOutputDIMACS = 0;
+  flagOutputSeparatedDIMACS = 0;
   flagIPCplans = 0;

 #if (MPDOWNLOAD || CMPDOWNLOAD)
@@ -330,10 +332,12 @@ int main(int argc,char **argv) {
     printf("           2 = E-step plans (Rintanen et al. 2004, 2006)\n");
     //    printf("           3 = E-step plans (Ogata et al. 2004)\n");
     printf("-O     Write formulas in a file in DIMACS format instead of solving.\n");
+    printf("-L     Write formulas in a file in separated DIMACS for incremental solving with another tool.\n");
     printf("-X     Don't use PDDL semantics for simultaneous v:=0 v:=1.\n");
     printf("-Q     Output plans in the IPC format.\n");
     printf("-o [filename]  Output plan to file.\n");
     printf("-b [filename]  Name for the DIMACS CNF files.\n");
+    printf("-s [filename]  Name for the DIMACS solution file, use -T to provide solution length.\n");
     printf("-t n   Timeout n seconds of CPU time\n");
     printf("-r n   Timeout n seconds of real time\n");
     printf("-m n   Allocating max. n MB of memory (default -m %i)\n",(int)flagMemoryLimit);
@@ -485,6 +489,11 @@ int main(int argc,char **argv) {
 	i++;
 	printf(" -o %s",outputfile);
 	break;
+      case 's':	/* Output file name */
+	solutionfile=argv[i+1];
+	i++;
+	printf(" -s %s",solutionfile);
+	break;
       case 'b':	/* Output file name for DIMACS CNF */
 	filenamebase=argv[i+1];
 	i++;
@@ -517,6 +526,9 @@ int main(int argc,char **argv) {
       case 'O': /* Output to DIMACS instead of running integrated SAT solver */
 	flagOutputDIMACS = 1;
 	break;
+      case 'L':
+        flagOutputSeparatedDIMACS = 1;
+        break;
       case 'N': /* Don't compute invariants. */
 	flagNoInvariants = 1;
 	printf(" -N");
@@ -735,7 +747,7 @@ int main(int argc,char **argv) {

   printf("max. learned clause length %i\n",stats_longest_learned);

-  if(flagOutputDIMACS == 0) {
+  if(flagOutputDIMACS == 0 && flagOutputSeparatedDIMACS == 0 && solutionfile == NULL) {
     printf("t val conflicts decisions\n");
     i = 0;
     do {
diff --git a/main.h b/main.h
index deec528..8a10b37 100644
--- a/main.h
+++ b/main.h
@@ -38,8 +38,10 @@ int currentInputFile;
 int nOfInputFiles;
 char *inputfiles[10];
 char *outputfile;
+char *solutionfile;

 int flagOutputDIMACS;
+int flagOutputSeparatedDIMACS;

 void *statmalloc(int,int);
 //#define statmalloc(a,b) malloc(b)
diff --git a/printplan.c b/printplan.c
index 67796e7..2b87792 100644
--- a/printplan.c
+++ b/printplan.c
@@ -256,6 +256,7 @@ void fprintplan(FILE *f,satinstance sati) {
   //  printf("TERMINAL STATE:"); printstate(sati,state1); printf("\n");

   printf("%i actions in the plan.\n",actionsinplan);
+  printf("Plan is VALID\n");
   if(cost) printf("Cost of the plan is %i.\n",cost);
 }

diff --git a/translate2sat.c b/translate2sat.c
index b5ea794..4265b9e 100644
--- a/translate2sat.c
+++ b/translate2sat.c
@@ -60,6 +60,7 @@
 #define LENBITS	0x0FFFFFFF

 void outputDIMACS();
+void outputSeparatedDIMACS();
 satinstance outputNSAT(int,int,int);


@@ -1608,6 +1609,41 @@ void encoding() {

   if(flagOutputDIMACS) {
     outputDIMACS();
+  } else if (flagOutputSeparatedDIMACS) {
+    outputSeparatedDIMACS();
+  } else if (solutionfile != NULL) {
+    satinstance sati = newinstance(1,lastTimePoint + 1,varsPerTime,nOfAtoms,nOfActions);
+
+    FILE *f = fopen(solutionfile,"r");
+    if (f == NULL) {
+      printf("Error: Could not open solution file\n");
+      exit(1);
+    } else {
+      while (!feof(f)) {
+        int literal = 0;
+
+        fscanf(f,"%d",&literal);
+        if (0 != ferror(f)) {
+          printf("Error: Solution file mal formed\n");
+          exit(1);
+        } else if (literal != 0) {
+          int lit;
+          lit = abs(literal-1);
+          if (lit < sati->nOfVars)
+          {
+            lit = lit << 1;
+            if (literal < 0) {
+              lit |= 1;
+            }
+
+            litsettrue(sati,lit);
+          }
+        }
+      }
+      fclose(f);
+    }
+
+    callprintplan(sati);
   } else {

     if(PLANheuristic == 0) printf("Heuristic: VSIDS\n");
@@ -2828,7 +2864,99 @@ void outputDIMACS() {
   }
 }

+void printClausesWithType(int type,FILE *F) {
+  int ptr, k, len, h;
+      ptr = 0;
+      for(k=0;k<nOfClauses;k++) { /* Output clauses for each time point. */
+	ptr += 1;
+	len = clauseset[ptr-1]&LENBITS;

+	if ((clauseset[ptr-1]&TIMEtags) == type) { /* 1st element = size, timepoints */
+	  for(h=ptr;h<ptr+len;h++) {
+	    if(clauseset[h] < 0) fprintf(F,"%i ",clauseset[h]);
+	    else fprintf(F,"%i ",clauseset[h]);
+	  }
+	  fprintf(F,"0\n");
+	}
+	ptr += len;
+      }
+}
+
+void outputSeparatedDIMACS() {
+  int i,j,k,ptr,h,len;
+  int nOfInvariants, nOfInit, nOfGoal, nOfTransition;
+  FILE *F;
+  char filename[1000];
+
+  printf("Separated DIMACS output\n");
+
+  /* Count how many clauses will be output later. */
+
+  nOfInvariants = 0;
+  for(k=0;k<nOfAtoms;k++) {
+    nOfInvariants += IScard(twolits[fePLIT(k)]);
+    nOfInvariants += IScard(twolits[feNLIT(k)]);
+  }
+
+  ptr = 0;
+  nOfInit = 0;
+  nOfGoal = 0;
+  nOfTransition = 0;
+  for (i=0;i<nOfClauses;i++){
+    len = clauseset[ptr]&LENBITS;
+    switch(clauseset[ptr]&TIMEtags) { /* 1st element = size, timepoints */
+      case TRtag: ++nOfTransition; break;
+      case INITtag: ++nOfInit; break;
+      case GOALtag: ++nOfGoal; break;
+      default: fprintf(stderr,"ERROR: 56567\n"); exit(1); break;
+    }
+    ptr += 1;
+    ptr += len;
+  }
+
+  if(filenamebase) {
+    sprintf(filename,"%s.cnf",filenamebase);
+  } else {
+    sprintf(filename,"%s-%s.cnf",domainname(),problemname());
+  }
+  printf("Writing %s",filename);
+#ifdef __LP64__
+  F = fopen(filename,"w");
+#else
+  F = fopen64(filename,"w");
+#endif
+
+  fprintf(F,"i cnf %i %i\n",varsPerTime, nOfInit);
+  printClausesWithType(INITtag,F);
+
+  /* Output invariants. (They are not in clauseset). */
+  fprintf(F,"u cnf %i %i\n",varsPerTime, nOfInvariants);
+  for(k=0;k<nOfAtoms;k++) {
+    ITstart(twolits[fePLIT(k)]); /* invariants k V l */
+    while(ITnext(&h)) {
+      if(feVAR(h) < k) { /* Only output one of l1 V l2 and l2 V l1. */
+        if(h&1) fprintf(F,"%i -%i 0\n",k+1,feVAR(h)+1);
+        else fprintf(F,"%i %i 0\n",k+1,feVAR(h)+1);
+      }
+    }
+    ITstart(twolits[feNLIT(k)]); /* invariants -k V l */
+    while(ITnext(&h)) {
+      if(feVAR(h) < k) { /* Only output one of l1 V l2 and l2 V l1. */
+	if(h&1) fprintf(F,"-%i -%i 0\n",k+1,feVAR(h)+1);
+	else fprintf(F,"-%i %i 0\n",k+1,feVAR(h)+1);
+      }
+    }
+  }
+
+  fprintf(F,"g cnf %i %i\n",varsPerTime, nOfGoal);
+  printClausesWithType(GOALtag,F);
+
+  fprintf(F,"t cnf %i %i\n",2 * varsPerTime, nOfTransition);
+  printClausesWithType(TRtag,F);
+
+  printf("\n");
+  fclose(F);
+}
 /*******************************************************************/
 /*       Call to the Integrated SAT solver                         */
 /*******************************************************************/
